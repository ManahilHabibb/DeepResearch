import re
import logging
from typing import List, Dict, Any, Optional
from datetime import datetime

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Utils:
    """Utility functions for the application"""
    
    @staticmethod
    def clean_text(text: str) -> str:
        """Clean and normalize text"""
        if not text:
            return ""
        
        # Remove extra whitespace
        text = re.sub(r'\s+', ' ', text).strip()
        
        # Remove special characters that might cause issues
        text = re.sub(r'[^\w\s\-.,!?;:()\[\]{}"\']', '', text)
        
        return text
    
    @staticmethod
    def truncate_text(text: str, max_length: int = 500) -> str:
        """Truncate text to specified length"""
        if len(text) <= max_length:
            return text
        return text[:max_length] + "..."
    
    @staticmethod
    def format_search_results(results: List[Dict[str, Any]]) -> str:
        """Format search results for display"""
        if not results:
            return "No search results found."
        
        formatted_results = []
        for i, result in enumerate(results, 1):
            title = result.get("title", "No title")
            body = result.get("body", "No description")
            href = result.get("href", "No URL")
            
            # Clean the text
            title = Utils.clean_text(title)
            body = Utils.clean_text(body)
            
            # Truncate if too long
            body = Utils.truncate_text(body, 200)
            
            formatted_result = f"""
**{i}. {title}**
{body}
🔗 Source: {href}
"""
            formatted_results.append(formatted_result)
        
        return "\n---\n".join(formatted_results)
    
    @staticmethod
    def create_research_report(query: str, results: str, analysis: str = "") -> str:
        """Create a formatted research report"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        report = f"""
# 🔍 Research Report: {query}

**Generated on:** {timestamp}

## 📊 Executive Summary

{analysis if analysis else "This report provides comprehensive research findings on the requested topic based on current web sources."}

## 🌐 Search Results

{results}

## 📋 Key Findings

Based on the search results above, here are the main insights:

- Multiple authoritative sources were found covering the topic
- Information is current and relevant to the query
- Sources provide diverse perspectives and comprehensive coverage

## 🔍 Research Methodology

This research was conducted using:
- **Search Engine:** DuckDuckGo
- **Analysis:** AI-powered content analysis
- **Sources:** Web-based information with proper citations

---
*Report generated by AI Research Assistant*
"""
        return report
    
    @staticmethod
    def validate_query(query: str) -> tuple[bool, str]:
        """Validate research query"""
        if not query or not query.strip():
            return False, "Query cannot be empty"
        
        if len(query.strip()) < 3:
            return False, "Query must be at least 3 characters long"
        
        if len(query) > 500:
            return False, "Query is too long (max 500 characters)"
        
        return True, "Query is valid"
    
    @staticmethod
    def log_error(error: Exception, context: str = ""):
        """Log errors with context"""
        logger.error(f"Error in {context}: {str(error)}", exc_info=True)
    
    @staticmethod
    def log_info(message: str):
        """Log information messages"""
        logger.info(message)